import WebSocket, { WebSocketServer } from "ws";

const wss = new WebSocketServer({ port: 8181 });

/** –ò–≥—Ä–æ–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: [{ name, password, index, ws, wins }] */
const players = [];
let nextPlayerIndex = 1;

/** –ö–æ–º–Ω–∞—Ç—ã: [{ roomId, players: [playerIndex], readyShips: { [playerIndex]: shipsArray } }] */
const rooms = [];
console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rooms:", rooms);
let nextRoomId = 1;

/** –ò–≥—Ä—ã: {
 *   [gameId]: {
 *     idGame,
 *     roomId,
 *     players: [playerIndex0, playerIndex1],
 *     ships: { [playerIndex]: shipsArray },
 *     boards: { [playerIndex]: boardState },
 *     hits: { [playerIndex]: Set of hit cells },
 *     currentPlayer: playerIndex,
 *     finished: bool
 *   }
 * }
 */
const games = {};
let nextGameId = 1;

// --- –£—Ç–∏–ª–∏—Ç—ã ---

function send(ws, obj) {
  ws.send(JSON.stringify({ ...obj, id: 0 }));
}

function broadcast(playersIndices, obj) {
  playersIndices.forEach((pi) => {
    const p = players.find((pl) => pl.index === pi);
    if (p && p.ws.readyState === WebSocket.OPEN) {
      send(p.ws, obj);
    }
  });
}

function getPlayerByName(name) {
  return players.find((p) => p.name === name);
}

function getPlayerByWs(ws) {
  return players.find((p) => p.ws === ws);
}

function sendRoomList() {
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç —Å –æ–¥–Ω–∏–º –∏–≥—Ä–æ–∫–æ–º (–æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
  const roomsList = rooms
    .filter((r) => r.players.length === 1)
    .map((r) => ({
      roomId: r.roomId,
      roomUsers: r.players.map((pi) => {
        const pl = players.find((p) => p.index === pi);
        return { name: pl.name, index: pl.index };
      }),
    }));

  players.forEach((p) => {
    if (p.ws.readyState === WebSocket.OPEN) {
      send(p.ws, { type: "update_room", data: roomsList });
    }
  });
}

function updateWinners() {
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥
  const winners = players
    .map((p) => ({ name: p.name, wins: p.wins || 0 }))
    .sort((a, b) => b.wins - a.wins);

  players.forEach((p) => {
    if (p.ws.readyState === WebSocket.OPEN) {
      send(p.ws, { type: "update_winners", data: winners });
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–æ—Ä–∞–±–ª—è–º
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å: "miss", "shot" (–ø–æ–ø–∞–¥–∞–Ω–∏–µ), "killed" (—É–Ω–∏—á—Ç–æ–∂–µ–Ω –∫–æ—Ä–∞–±–ª—å)
function processAttack(game, attackerIndex, x, y) {
  const defenderIndex = game.players.find((pi) => pi !== attackerIndex);
  const defenderShips = game.ships[defenderIndex];
  const defenderHits = game.hits[defenderIndex];

  // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–π—Ç–∏ –∫–æ—Ä–∞–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç (x,y)
  let hitShip = null;
  for (const ship of defenderShips) {
    const cells = getShipCells(ship);
    if (cells.some((c) => c.x === x && c.y === y)) {
      hitShip = ship;
      break;
    }
  }

  if (!hitShip) {
    return "miss";
  }

  // –î–æ–±–∞–≤–∏–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ hits
  defenderHits.add(`${x},${y}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å (–≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤ hits)
  const shipCells = getShipCells(hitShip);
  const allHit = shipCells.every((c) => defenderHits.has(`${c.x},${c.y}`));

  return allHit ? "killed" : "shot";
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è
function getShipCells(ship) {
  const cells = [];
  for (let i = 0; i < ship.length; i++) {
    cells.push({
      x: ship.position.x + (ship.direction ? i : 0),
      y: ship.position.y + (ship.direction ? 0 : i),
    });
  }
  return cells;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWin(game) {
  const defenderIndex = game.players.find((pi) => pi !== game.currentPlayer);
  const defenderShips = game.ships[defenderIndex];
  const defenderHits = game.hits[defenderIndex];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ–ø–∞–ª–∏
  return defenderShips.every((ship) =>
    getShipCells(ship).every((c) => defenderHits.has(`${c.x},${c.y}`))
  );
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞–º
function sendTurn(game) {
  broadcast(game.players, {
    type: "turn",
    data: { currentPlayer: game.currentPlayer },
  });
}

function finishGame(game, winnerIndex) {
  game.finished = true;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const winner = players.find((p) => p.index === winnerIndex);
  if (winner) winner.wins = (winner.wins || 0) + 1;

  broadcast(game.players, {
    type: "finish",
    data: { winPlayer: winnerIndex },
  });

  updateWinners();
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket ---

wss.on("connection", (ws) => {
  console.log("New client connected");

  ws.on("message", (msg) => {
    let msgObj;
    try {
      msgObj = JSON.parse(msg.toString());
    } catch {
      return;
    }
  console.log("–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", msgObj); // üëà –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì

    const { type, data } = msgObj;
    const player = getPlayerByWs(ws);

    // --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò–õ–ò –õ–û–ì–ò–ù ---
    if (type === "reg") {
      const { name, password } = data;
      if (!name || !password) {
        send(ws, {
          type: "reg",
          data: { error: true, errorText: "Name or password missing" },
        });
        return;
      }

      const existing = getPlayerByName(name);
      if (existing) {
        if (existing.password === password) {
          existing.ws = ws; // –û–±–Ω–æ–≤–ª—è–µ–º ws, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏–≥—Ä–æ–∫
          send(ws, {
            type: "reg",
            data: { name, index: existing.index, error: false, errorText: "" },
          });
          sendRoomList();
          updateWinners();
        } else {
          send(ws, {
            type: "reg",
            data: { error: true, errorText: "Wrong password" },
          });
        }
      } else {
        const newPlayer = { name, password, ws, index: nextPlayerIndex++, wins: 0 };
        players.push(newPlayer);
        send(ws, {
          type: "reg",
          data: { name, index: newPlayer.index, error: false, errorText: "" },
        });
        sendRoomList();
        updateWinners();
      }
      return;
    }

    // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–æ–º–µ reg
    if (!player) return;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É. –ò–≥—Ä–æ–∫: ${player.index}`);
console.log("–¢–µ–∫—É—â–∏–µ –∫–æ–º–Ω–∞—Ç—ã:", JSON.stringify(rooms, null, 2));


    // --- –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ù–ê–¢–´ ---
    if (type === "create_room") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ
      if (rooms.find((r) => r.players.includes(player.index))) {
        // –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        sendRoomList();
        return;
      }
      rooms.push({ roomId: nextRoomId++, players: [player.index], readyShips: {} });
      sendRoomList();
      return;
    }
    console.log("–ö–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:", rooms);

    // --- –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ö–û–ú–ù–ê–¢–ï ---
    if (type === "add_user_to_room") {
      const { indexRoom } = data;
      const room = rooms.find((r) => r.roomId === indexRoom);
      if (!room) return;

      // –ò–≥—Ä–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ
      if (rooms.find((r) => r.players.includes(player.index))) return;

      if (room.players.length < 2) {
        room.players.push(player.index);

        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        const gameId = nextGameId++;
        const gamePlayers = [...room.players];
        games[gameId] = {
          idGame: gameId,
          roomId: room.roomId,
          players: gamePlayers,
          ships: {},
          hits: {
            [gamePlayers[0]]: new Set(),
            [gamePlayers[1]]: new Set(),
          },
          currentPlayer: gamePlayers[0],
          finished: false,
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º create_game –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º idPlayer
        gamePlayers.forEach((pi, idx) => {
          const p = players.find((pl) => pl.index === pi);
          if (p && p.ws.readyState === WebSocket.OPEN) {
            send(p.ws, {
              type: "create_game",
              data: {
                idGame: gameId,
                idPlayer: pi,
              },
            });
          }
        });

        // –£–±–∏—Ä–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
        const roomIndex = rooms.findIndex((r) => r.roomId === indexRoom);
        if (roomIndex !== -1) rooms.splice(roomIndex, 1);

        sendRoomList();
      }
      return;
    }

    // --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–†–ê–ë–õ–ï–ô ---
    if (type === "add_ships") {
      const { gameId, ships, indexPlayer } = data;
      const game = games[gameId];
      if (!game || game.finished) return;
      if (!game.players.includes(indexPlayer)) return;

      game.ships[indexPlayer] = ships;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—Å—Ç–∞–≤–∏–ª–∏ –ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –∫–æ—Ä–∞–±–ª–∏
      if (
        game.players.every((pi) => game.ships[pi] && game.ships[pi].length > 0)
      ) {
        // –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
        broadcast(game.players, {
          type: "start_game",
          data: {
            currentPlayer: game.currentPlayer,
          },
        });
        sendTurn(game);
      }
      return;
    }

    // --- –•–û–î –ò–ì–†–û–ö–ê ---
    if (type === "make_move") {
      const { gameId, indexPlayer, x, y } = data;
      const game = games[gameId];
      if (!game || game.finished) return;
      if (game.currentPlayer !== indexPlayer) return;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
      const result = processAttack(game, indexPlayer, x, y);

      // –°–æ–æ–±—â–∞–µ–º —Ö–æ–¥ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      broadcast(game.players, {
        type: "player_move",
        data: {
          x,
          y,
          idPlayer: indexPlayer,
          shotStatus: result,
        },
      });

      if (result === "miss") {
        // –ú–µ–Ω—è–µ–º —Ö–æ–¥
        const nextPlayer = game.players.find((pi) => pi !== game.currentPlayer);
        game.currentPlayer = nextPlayer;
        sendTurn(game);
      } else if (result === "killed") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if (checkWin(game)) {
          finishGame(game, indexPlayer);
        } else {
          // –ò–≥—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ö–æ–¥–∏—Ç—å (–æ–Ω —É–±–∏–ª –∫–æ—Ä–∞–±–ª—å)
          sendTurn(game);
        }
      } else if (result === "shot") {
        // –ò–≥—Ä–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ö–æ–¥–∏—Ç—å
        sendTurn(game);
      }
      return;
    }

    // --- –û–¢–í–Ø–ó–ö–ê –û–¢ –ò–ì–†–´ –ü–†–ò –û–¢–ö–õ–Æ–ß–ï–ù–ò–ò ---
    if (type === "leave_game") {
      const { gameId } = data;
      const game = games[gameId];
      if (!game) return;

      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏ –∫–æ–º–Ω–∞—Ç—É
      delete games[gameId];
      // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (–∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã —Å –Ω–∏–º–∏)

      sendRoomList();
      updateWinners();
      return;
    }
  });

  ws.on("close", () => {
    // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    const idx = players.findIndex((p) => p.ws === ws);
    if (idx !== -1) {
      const disconnectedPlayer = players[idx];

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–Ω–∞—Ç
      rooms.forEach((room) => {
        room.players = room.players.filter((pi) => pi !== disconnectedPlayer.index);
      });
      for (let i = rooms.length - 1; i >= 0; i--) {
        if (rooms[i].players.length === 0) rooms.splice(i, 1);
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–≥—Ä (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
      for (const gameId in games) {
        const game = games[gameId];
        if (game.players.includes(disconnectedPlayer.index)) {
          broadcast(
            game.players.filter((pi) => pi !== disconnectedPlayer.index),
            { type: "finish", data: { winPlayer: null, reason: "Opponent disconnected" } }
          );
          delete games[gameId];
        }
      }

      players.splice(idx, 1);

      sendRoomList();
      updateWinners();
    }

    console.log("Client disconnected");
  });
});

console.log("WebSocket server running on ws://localhost:8181");
